using Newtonsoft.Json.Serialization;
using Rhino.Geometry;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace Infra.Core.Json
{
    public class LougeJsonTypeBinder : ISerializationBinder
    {
        static IDictionary<string, Type> typeMap = new Dictionary<string, Type>();

        static LougeJsonTypeBinder()
        {
            var currentDirectory = AppDomain.CurrentDomain.BaseDirectory;
            var rhinoFiles = GetLougeAssemblyFiles(currentDirectory);
            var assemblies = AppDomain.CurrentDomain.GetAssemblies()
                .Where(x => x.FullName.Contains("Contract")
            || x.FullName.Contains("Louge.Geometry"));
            var pluginAssemblies = AppDomain.CurrentDomain.GetAssemblies()
                .Where(x => x.FullName.Contains("Louge.Plugin"))
                .Where(x => x.ManifestModule.Name.EndsWith(".rhp"));
            foreach (var pluginAssembly in pluginAssemblies)
            {
                var directory = Path.GetDirectoryName(pluginAssembly.Location);
                rhinoFiles = rhinoFiles.Union(GetLougeAssemblyFiles(directory));
            }
            if (rhinoFiles.Any())
            {
                foreach (var rhinoFile in rhinoFiles)
                {
                    var rhinoAssembly = Assembly.LoadFrom(rhinoFile);
                    if (!assemblies.Contains(rhinoAssembly))
                    {
                        assemblies = assemblies.Append(rhinoAssembly);
                    }
                }
            }
            foreach (var assembly in assemblies)
            {
                foreach (var type in assembly.ExportedTypes)
                {
                    if (type.Namespace == null)
                    {
                        continue;
                    }
                    if (!typeMap.ContainsKey(type.FullName))
                    {
                        typeMap.Add(type.FullName, type);
                    }
                    
                    }

                }
            }
        }

        private static IEnumerable<string> GetLougeAssemblyFiles(string directory)
        {
            return Directory.GetFiles(directory).Where(f => f.EndsWith(".dll") &&
            (f.Contains("RhinoCommon")
            || f.Contains("Rhino3dm")
            || f.Contains("Contract")
            || f.Contains("Louge.Abstract")
            || f.Contains("Louge.Geometry")));
        }
        public void BindToName(Type serializedType, out string assemblyName, out string typeName)
        {
            assemblyName = serializedType.Assembly.GetName().Name;
            typeName = serializedType.FullName;
        }

        public Type BindToType(string assemblyName, string typeName)
        {
            try
            {
                switch (typeName)
                {
                    case "System.Byte[]":
                        return typeof(byte[]);
                }
                if (typeName.StartsWith("System.ValueTuple"))
                {
                    typeName = typeName.Replace("System.Private.CoreLib", "mscorlib");
                    return Type.GetType(typeName);
                }
                return typeMap[typeName];
            }
            catch (Exception)
            {
                return null;
            }

        }
    }
}
